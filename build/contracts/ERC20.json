{
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "sender",
          "type": "address"
        },
        {
          "name": "recipient",
          "type": "address"
        },
        {
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "recipient",
          "type": "address"
        },
        {
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    }
  ],
  "allSourcePaths": [
    "contracts/open-zeppelin/contracts/math/SafeMath.sol",
    "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
    "contracts/open-zeppelin/contracts/token/ERC20/IERC20.sol"
  ],
  "ast": {
    "absolutePath": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
    "exportedSymbols": {
      "ERC20": [
        9179
      ]
    },
    "id": 9180,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 8784,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:107"
      },
      {
        "absolutePath": "contracts/open-zeppelin/contracts/token/ERC20/IERC20.sol",
        "file": "./IERC20.sol",
        "id": 8785,
        "nodeType": "ImportDirective",
        "scope": 9180,
        "sourceUnit": 9527,
        "src": "25:22:107",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
        "file": "../../math/SafeMath.sol",
        "id": 8786,
        "nodeType": "ImportDirective",
        "scope": 9180,
        "sourceUnit": 5199,
        "src": "48:33:107",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 8787,
              "name": "IERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 9526,
              "src": "1250:6:107",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC20_$9526",
                "typeString": "contract IERC20"
              }
            },
            "id": 8788,
            "nodeType": "InheritanceSpecifier",
            "src": "1250:6:107"
          }
        ],
        "contractDependencies": [
          9526
        ],
        "contractKind": "contract",
        "documentation": "@dev Implementation of the `IERC20` interface.\n * This implementation is agnostic to the way tokens are created. This means\nthat a supply mechanism has to be added in a derived contract using `_mint`.\nFor a generic mechanism see `ERC20Mintable`.\n * *For a detailed writeup see our guide [How to implement supply\nmechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n * We have followed general OpenZeppelin guidelines: functions revert instead\nof returning `false` on failure. This behavior is nonetheless conventional\nand does not conflict with the expectations of ERC20 applications.\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\nThis allows applications to reconstruct the allowance for all accounts just\nby listening to said events. Other implementations of the EIP may not emit\nthese events, as it isn't required by the specification.\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\nfunctions have been added to mitigate the well-known issues around setting\nallowances. See `IERC20.approve`.",
        "fullyImplemented": true,
        "id": 9179,
        "linearizedBaseContracts": [
          9179,
          9526
        ],
        "name": "ERC20",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 8791,
            "libraryName": {
              "contractScope": null,
              "id": 8789,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 5198,
              "src": "1269:8:107",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$5198",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "1263:27:107",
            "typeName": {
              "id": 8790,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1282:7:107",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "constant": false,
            "id": 8795,
            "name": "_balances",
            "nodeType": "VariableDeclaration",
            "scope": 9179,
            "src": "1296:46:107",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 8794,
              "keyType": {
                "id": 8792,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1305:7:107",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1296:28:107",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 8793,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1316:7:107",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 8801,
            "name": "_allowances",
            "nodeType": "VariableDeclaration",
            "scope": 9179,
            "src": "1349:69:107",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
              "typeString": "mapping(address => mapping(address => uint256))"
            },
            "typeName": {
              "id": 8800,
              "keyType": {
                "id": 8796,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1358:7:107",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1349:49:107",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                "typeString": "mapping(address => mapping(address => uint256))"
              },
              "valueType": {
                "id": 8799,
                "keyType": {
                  "id": 8797,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1378:7:107",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "nodeType": "Mapping",
                "src": "1369:28:107",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "valueType": {
                  "id": 8798,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1389:7:107",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 8803,
            "name": "_totalSupply",
            "nodeType": "VariableDeclaration",
            "scope": 9179,
            "src": "1425:28:107",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 8802,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1425:7:107",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "body": {
              "id": 8810,
              "nodeType": "Block",
              "src": "1567:36:107",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 8808,
                    "name": "_totalSupply",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 8803,
                    "src": "1584:12:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 8807,
                  "id": 8809,
                  "nodeType": "Return",
                  "src": "1577:19:107"
                }
              ]
            },
            "documentation": "@dev See `IERC20.totalSupply`.",
            "id": 8811,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "totalSupply",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8804,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1534:2:107"
            },
            "returnParameters": {
              "id": 8807,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8806,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 8811,
                  "src": "1558:7:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 8805,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1558:7:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1557:9:107"
            },
            "scope": 9179,
            "src": "1514:89:107",
            "stateMutability": "view",
            "superFunction": 9464,
            "visibility": "public"
          },
          {
            "body": {
              "id": 8822,
              "nodeType": "Block",
              "src": "1727:42:107",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 8818,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8795,
                      "src": "1744:9:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 8820,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 8819,
                      "name": "account",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8813,
                      "src": "1754:7:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1744:18:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 8817,
                  "id": 8821,
                  "nodeType": "Return",
                  "src": "1737:25:107"
                }
              ]
            },
            "documentation": "@dev See `IERC20.balanceOf`.",
            "id": 8823,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "balanceOf",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8814,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8813,
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 8823,
                  "src": "1680:15:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 8812,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1680:7:107",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1679:17:107"
            },
            "returnParameters": {
              "id": 8817,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8816,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 8823,
                  "src": "1718:7:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 8815,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1718:7:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1717:9:107"
            },
            "scope": 9179,
            "src": "1661:108:107",
            "stateMutability": "view",
            "superFunction": 9471,
            "visibility": "public"
          },
          {
            "body": {
              "id": 8841,
              "nodeType": "Block",
              "src": "2047:78:107",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 8833,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12582,
                          "src": "2067:3:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 8834,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "2067:10:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 8835,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8825,
                        "src": "2079:9:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 8836,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8827,
                        "src": "2090:6:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 8832,
                      "name": "_transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9022,
                      "src": "2057:9:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 8837,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2057:40:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8838,
                  "nodeType": "ExpressionStatement",
                  "src": "2057:40:107"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 8839,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2114:4:107",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 8831,
                  "id": 8840,
                  "nodeType": "Return",
                  "src": "2107:11:107"
                }
              ]
            },
            "documentation": "@dev See `IERC20.transfer`.\n     * Requirements:\n     * - `recipient` cannot be the zero address.\n- the caller must have a balance of at least `amount`.",
            "id": 8842,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "transfer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8828,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8825,
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 8842,
                  "src": "1990:17:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 8824,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1990:7:107",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 8827,
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 8842,
                  "src": "2009:14:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 8826,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2009:7:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1989:35:107"
            },
            "returnParameters": {
              "id": 8831,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8830,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 8842,
                  "src": "2041:4:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 8829,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2041:4:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2040:6:107"
            },
            "scope": 9179,
            "src": "1972:153:107",
            "stateMutability": "nonpayable",
            "superFunction": 9480,
            "visibility": "public"
          },
          {
            "body": {
              "id": 8857,
              "nodeType": "Block",
              "src": "2264:51:107",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 8851,
                        "name": "_allowances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8801,
                        "src": "2281:11:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                          "typeString": "mapping(address => mapping(address => uint256))"
                        }
                      },
                      "id": 8853,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 8852,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8844,
                        "src": "2293:5:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "2281:18:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 8855,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 8854,
                      "name": "spender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8846,
                      "src": "2300:7:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2281:27:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 8850,
                  "id": 8856,
                  "nodeType": "Return",
                  "src": "2274:34:107"
                }
              ]
            },
            "documentation": "@dev See `IERC20.allowance`.",
            "id": 8858,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "allowance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8847,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8844,
                  "name": "owner",
                  "nodeType": "VariableDeclaration",
                  "scope": 8858,
                  "src": "2202:13:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 8843,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2202:7:107",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 8846,
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 8858,
                  "src": "2217:15:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 8845,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2217:7:107",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2201:32:107"
            },
            "returnParameters": {
              "id": 8850,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8849,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 8858,
                  "src": "2255:7:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 8848,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2255:7:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2254:9:107"
            },
            "scope": 9179,
            "src": "2183:132:107",
            "stateMutability": "view",
            "superFunction": 9489,
            "visibility": "public"
          },
          {
            "body": {
              "id": 8876,
              "nodeType": "Block",
              "src": "2524:74:107",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 8868,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12582,
                          "src": "2543:3:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 8869,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "2543:10:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 8870,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8860,
                        "src": "2555:7:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 8871,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8862,
                        "src": "2564:5:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 8867,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9150,
                      "src": "2534:8:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 8872,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2534:36:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8873,
                  "nodeType": "ExpressionStatement",
                  "src": "2534:36:107"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 8874,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2587:4:107",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 8866,
                  "id": 8875,
                  "nodeType": "Return",
                  "src": "2580:11:107"
                }
              ]
            },
            "documentation": "@dev See `IERC20.approve`.\n     * Requirements:\n     * - `spender` cannot be the zero address.",
            "id": 8877,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "approve",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8863,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8860,
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 8877,
                  "src": "2470:15:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 8859,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2470:7:107",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 8862,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 8877,
                  "src": "2487:13:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 8861,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2487:7:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2469:32:107"
            },
            "returnParameters": {
              "id": 8866,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8865,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 8877,
                  "src": "2518:4:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 8864,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2518:4:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2517:6:107"
            },
            "scope": 9179,
            "src": "2453:145:107",
            "stateMutability": "nonpayable",
            "superFunction": 9498,
            "visibility": "public"
          },
          {
            "body": {
              "id": 8911,
              "nodeType": "Block",
              "src": "3150:157:107",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 8889,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8879,
                        "src": "3170:6:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 8890,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8881,
                        "src": "3178:9:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 8891,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8883,
                        "src": "3189:6:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 8888,
                      "name": "_transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9022,
                      "src": "3160:9:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 8892,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3160:36:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8893,
                  "nodeType": "ExpressionStatement",
                  "src": "3160:36:107"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 8895,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8879,
                        "src": "3215:6:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 8896,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12582,
                          "src": "3223:3:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 8897,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "3223:10:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 8905,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 8883,
                            "src": "3271:6:107",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 8898,
                                "name": "_allowances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 8801,
                                "src": "3235:11:107",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 8900,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 8899,
                                "name": "sender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 8879,
                                "src": "3247:6:107",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3235:19:107",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 8903,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 8901,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 12582,
                                "src": "3255:3:107",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 8902,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "3255:10:107",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3235:31:107",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 8904,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sub",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 5117,
                          "src": "3235:35:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 8906,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3235:43:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 8894,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9150,
                      "src": "3206:8:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 8907,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3206:73:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8908,
                  "nodeType": "ExpressionStatement",
                  "src": "3206:73:107"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 8909,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3296:4:107",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 8887,
                  "id": 8910,
                  "nodeType": "Return",
                  "src": "3289:11:107"
                }
              ]
            },
            "documentation": "@dev See `IERC20.transferFrom`.\n     * Emits an `Approval` event indicating the updated allowance. This is not\nrequired by the EIP. See the note at the beginning of `ERC20`;\n     * Requirements:\n- `sender` and `recipient` cannot be the zero address.\n- `sender` must have a balance of at least `value`.\n- the caller must have allowance for `sender`'s tokens of at least\n`amount`.",
            "id": 8912,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "transferFrom",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8884,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8879,
                  "name": "sender",
                  "nodeType": "VariableDeclaration",
                  "scope": 8912,
                  "src": "3077:14:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 8878,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3077:7:107",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 8881,
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 8912,
                  "src": "3093:17:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 8880,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3093:7:107",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 8883,
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 8912,
                  "src": "3112:14:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 8882,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3112:7:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3076:51:107"
            },
            "returnParameters": {
              "id": 8887,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8886,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 8912,
                  "src": "3144:4:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 8885,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3144:4:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3143:6:107"
            },
            "scope": 9179,
            "src": "3055:252:107",
            "stateMutability": "nonpayable",
            "superFunction": 9509,
            "visibility": "public"
          },
          {
            "body": {
              "id": 8938,
              "nodeType": "Block",
              "src": "3788:117:107",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 8922,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12582,
                          "src": "3807:3:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 8923,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "3807:10:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 8924,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8914,
                        "src": "3819:7:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 8932,
                            "name": "addedValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 8916,
                            "src": "3865:10:107",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 8925,
                                "name": "_allowances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 8801,
                                "src": "3828:11:107",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 8928,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 8926,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 12582,
                                  "src": "3840:3:107",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 8927,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "3840:10:107",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3828:23:107",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 8930,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 8929,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 8914,
                              "src": "3852:7:107",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3828:32:107",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 8931,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "add",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 5092,
                          "src": "3828:36:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 8933,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3828:48:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 8921,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9150,
                      "src": "3798:8:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 8934,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3798:79:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8935,
                  "nodeType": "ExpressionStatement",
                  "src": "3798:79:107"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 8936,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3894:4:107",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 8920,
                  "id": 8937,
                  "nodeType": "Return",
                  "src": "3887:11:107"
                }
              ]
            },
            "documentation": "@dev Atomically increases the allowance granted to `spender` by the caller.\n     * This is an alternative to `approve` that can be used as a mitigation for\nproblems described in `IERC20.approve`.\n     * Emits an `Approval` event indicating the updated allowance.\n     * Requirements:\n     * - `spender` cannot be the zero address.",
            "id": 8939,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "increaseAllowance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8917,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8914,
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 8939,
                  "src": "3729:15:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 8913,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3729:7:107",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 8916,
                  "name": "addedValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 8939,
                  "src": "3746:18:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 8915,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3746:7:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3728:37:107"
            },
            "returnParameters": {
              "id": 8920,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8919,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 8939,
                  "src": "3782:4:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 8918,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3782:4:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3781:6:107"
            },
            "scope": 9179,
            "src": "3702:203:107",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 8965,
              "nodeType": "Block",
              "src": "4483:122:107",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 8949,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12582,
                          "src": "4502:3:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 8950,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "4502:10:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 8951,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8941,
                        "src": "4514:7:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 8959,
                            "name": "subtractedValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 8943,
                            "src": "4560:15:107",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 8952,
                                "name": "_allowances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 8801,
                                "src": "4523:11:107",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 8955,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 8953,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 12582,
                                  "src": "4535:3:107",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 8954,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "4535:10:107",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4523:23:107",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 8957,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 8956,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 8941,
                              "src": "4547:7:107",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "4523:32:107",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 8958,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sub",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 5117,
                          "src": "4523:36:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 8960,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4523:53:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 8948,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9150,
                      "src": "4493:8:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 8961,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4493:84:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8962,
                  "nodeType": "ExpressionStatement",
                  "src": "4493:84:107"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 8963,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "4594:4:107",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 8947,
                  "id": 8964,
                  "nodeType": "Return",
                  "src": "4587:11:107"
                }
              ]
            },
            "documentation": "@dev Atomically decreases the allowance granted to `spender` by the caller.\n     * This is an alternative to `approve` that can be used as a mitigation for\nproblems described in `IERC20.approve`.\n     * Emits an `Approval` event indicating the updated allowance.\n     * Requirements:\n     * - `spender` cannot be the zero address.\n- `spender` must have allowance for the caller of at least\n`subtractedValue`.",
            "id": 8966,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decreaseAllowance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8944,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8941,
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 8966,
                  "src": "4419:15:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 8940,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4419:7:107",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 8943,
                  "name": "subtractedValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 8966,
                  "src": "4436:23:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 8942,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4436:7:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4418:42:107"
            },
            "returnParameters": {
              "id": 8947,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8946,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 8966,
                  "src": "4477:4:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 8945,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4477:4:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4476:6:107"
            },
            "scope": 9179,
            "src": "4392:213:107",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 9021,
              "nodeType": "Block",
              "src": "5158:343:107",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 8980,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 8976,
                          "name": "sender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8968,
                          "src": "5176:6:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 8978,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5194:1:107",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 8977,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5186:7:107",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 8979,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5186:10:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "5176:20:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
                        "id": 8981,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5198:39:107",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
                          "typeString": "literal_string \"ERC20: transfer from the zero address\""
                        },
                        "value": "ERC20: transfer from the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
                          "typeString": "literal_string \"ERC20: transfer from the zero address\""
                        }
                      ],
                      "id": 8975,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        12585,
                        12586
                      ],
                      "referencedDeclaration": 12586,
                      "src": "5168:7:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 8982,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5168:70:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8983,
                  "nodeType": "ExpressionStatement",
                  "src": "5168:70:107"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 8989,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 8985,
                          "name": "recipient",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8970,
                          "src": "5256:9:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 8987,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5277:1:107",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 8986,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5269:7:107",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 8988,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5269:10:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "5256:23:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
                        "id": 8990,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5281:37:107",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
                          "typeString": "literal_string \"ERC20: transfer to the zero address\""
                        },
                        "value": "ERC20: transfer to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
                          "typeString": "literal_string \"ERC20: transfer to the zero address\""
                        }
                      ],
                      "id": 8984,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        12585,
                        12586
                      ],
                      "referencedDeclaration": 12586,
                      "src": "5248:7:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 8991,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5248:71:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8992,
                  "nodeType": "ExpressionStatement",
                  "src": "5248:71:107"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 9002,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 8993,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8795,
                        "src": "5330:9:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 8995,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 8994,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8968,
                        "src": "5340:6:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "5330:17:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 9000,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8972,
                          "src": "5372:6:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 8996,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 8795,
                            "src": "5350:9:107",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 8998,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 8997,
                            "name": "sender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 8968,
                            "src": "5360:6:107",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "5350:17:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 8999,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sub",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 5117,
                        "src": "5350:21:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 9001,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5350:29:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5330:49:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 9003,
                  "nodeType": "ExpressionStatement",
                  "src": "5330:49:107"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 9013,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 9004,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8795,
                        "src": "5389:9:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 9006,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 9005,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8970,
                        "src": "5399:9:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "5389:20:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 9011,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8972,
                          "src": "5437:6:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 9007,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 8795,
                            "src": "5412:9:107",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 9009,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 9008,
                            "name": "recipient",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 8970,
                            "src": "5422:9:107",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "5412:20:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 9010,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 5092,
                        "src": "5412:24:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 9012,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5412:32:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5389:55:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 9014,
                  "nodeType": "ExpressionStatement",
                  "src": "5389:55:107"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 9016,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8968,
                        "src": "5468:6:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 9017,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8970,
                        "src": "5476:9:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 9018,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8972,
                        "src": "5487:6:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 9015,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9517,
                      "src": "5459:8:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 9019,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5459:35:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 9020,
                  "nodeType": "EmitStatement",
                  "src": "5454:40:107"
                }
              ]
            },
            "documentation": "@dev Moves tokens `amount` from `sender` to `recipient`.\n     * This is internal function is equivalent to `transfer`, and can be used to\ne.g. implement automatic token fees, slashing mechanisms, etc.\n     * Emits a `Transfer` event.\n     * Requirements:\n     * - `sender` cannot be the zero address.\n- `recipient` cannot be the zero address.\n- `sender` must have a balance of at least `amount`.",
            "id": 9022,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_transfer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8973,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8968,
                  "name": "sender",
                  "nodeType": "VariableDeclaration",
                  "scope": 9022,
                  "src": "5098:14:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 8967,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5098:7:107",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 8970,
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 9022,
                  "src": "5114:17:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 8969,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5114:7:107",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 8972,
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 9022,
                  "src": "5133:14:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 8971,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5133:7:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5097:51:107"
            },
            "returnParameters": {
              "id": 8974,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5158:0:107"
            },
            "scope": 9179,
            "src": "5079:422:107",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 9064,
              "nodeType": "Block",
              "src": "5828:245:107",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 9034,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 9030,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 9024,
                          "src": "5846:7:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 9032,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5865:1:107",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 9031,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5857:7:107",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 9033,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5857:10:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "5846:21:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
                        "id": 9035,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5869:33:107",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
                          "typeString": "literal_string \"ERC20: mint to the zero address\""
                        },
                        "value": "ERC20: mint to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
                          "typeString": "literal_string \"ERC20: mint to the zero address\""
                        }
                      ],
                      "id": 9029,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        12585,
                        12586
                      ],
                      "referencedDeclaration": 12586,
                      "src": "5838:7:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 9036,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5838:65:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 9037,
                  "nodeType": "ExpressionStatement",
                  "src": "5838:65:107"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 9043,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 9038,
                      "name": "_totalSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8803,
                      "src": "5914:12:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 9041,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 9026,
                          "src": "5946:6:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "id": 9039,
                          "name": "_totalSupply",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8803,
                          "src": "5929:12:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 9040,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 5092,
                        "src": "5929:16:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 9042,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5929:24:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5914:39:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 9044,
                  "nodeType": "ExpressionStatement",
                  "src": "5914:39:107"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 9054,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 9045,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8795,
                        "src": "5963:9:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 9047,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 9046,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9024,
                        "src": "5973:7:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "5963:18:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 9052,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 9026,
                          "src": "6007:6:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 9048,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 8795,
                            "src": "5984:9:107",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 9050,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 9049,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 9024,
                            "src": "5994:7:107",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "5984:18:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 9051,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 5092,
                        "src": "5984:22:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 9053,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5984:30:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5963:51:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 9055,
                  "nodeType": "ExpressionStatement",
                  "src": "5963:51:107"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 9058,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6046:1:107",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 9057,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "6038:7:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": "address"
                        },
                        "id": 9059,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6038:10:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 9060,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9024,
                        "src": "6050:7:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 9061,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9026,
                        "src": "6059:6:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 9056,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9517,
                      "src": "6029:8:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 9062,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6029:37:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 9063,
                  "nodeType": "EmitStatement",
                  "src": "6024:42:107"
                }
              ]
            },
            "documentation": "@dev Creates `amount` tokens and assigns them to `account`, increasing\nthe total supply.\n     * Emits a `Transfer` event with `from` set to the zero address.\n     * Requirements\n     * - `to` cannot be the zero address.",
            "id": 9065,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 9027,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9024,
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 9065,
                  "src": "5786:15:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9023,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5786:7:107",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9026,
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 9065,
                  "src": "5803:14:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 9025,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5803:7:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5785:33:107"
            },
            "returnParameters": {
              "id": 9028,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5828:0:107"
            },
            "scope": 9179,
            "src": "5771:302:107",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 9107,
              "nodeType": "Block",
              "src": "6448:244:107",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 9077,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 9073,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 9067,
                          "src": "6466:7:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 9075,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6485:1:107",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 9074,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "6477:7:107",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 9076,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6477:10:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "6466:21:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
                        "id": 9078,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6489:35:107",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
                          "typeString": "literal_string \"ERC20: burn from the zero address\""
                        },
                        "value": "ERC20: burn from the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
                          "typeString": "literal_string \"ERC20: burn from the zero address\""
                        }
                      ],
                      "id": 9072,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        12585,
                        12586
                      ],
                      "referencedDeclaration": 12586,
                      "src": "6458:7:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 9079,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6458:67:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 9080,
                  "nodeType": "ExpressionStatement",
                  "src": "6458:67:107"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 9086,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 9081,
                      "name": "_totalSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8803,
                      "src": "6536:12:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 9084,
                          "name": "value",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 9069,
                          "src": "6568:5:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "id": 9082,
                          "name": "_totalSupply",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8803,
                          "src": "6551:12:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 9083,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sub",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 5117,
                        "src": "6551:16:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 9085,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6551:23:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6536:38:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 9087,
                  "nodeType": "ExpressionStatement",
                  "src": "6536:38:107"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 9097,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 9088,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8795,
                        "src": "6584:9:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 9090,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 9089,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9067,
                        "src": "6594:7:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "6584:18:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 9095,
                          "name": "value",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 9069,
                          "src": "6628:5:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 9091,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 8795,
                            "src": "6605:9:107",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 9093,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 9092,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 9067,
                            "src": "6615:7:107",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6605:18:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 9094,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sub",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 5117,
                        "src": "6605:22:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 9096,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6605:29:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6584:50:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 9098,
                  "nodeType": "ExpressionStatement",
                  "src": "6584:50:107"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 9100,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9067,
                        "src": "6658:7:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 9102,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6675:1:107",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 9101,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "6667:7:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": "address"
                        },
                        "id": 9103,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6667:10:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 9104,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9069,
                        "src": "6679:5:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 9099,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9517,
                      "src": "6649:8:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 9105,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6649:36:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 9106,
                  "nodeType": "EmitStatement",
                  "src": "6644:41:107"
                }
              ]
            },
            "documentation": "@dev Destoys `amount` tokens from `account`, reducing the\ntotal supply.\n     * Emits a `Transfer` event with `to` set to the zero address.\n     * Requirements\n     * - `account` cannot be the zero address.\n- `account` must have at least `amount` tokens.",
            "id": 9108,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 9070,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9067,
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 9108,
                  "src": "6407:15:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9066,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6407:7:107",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9069,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 9108,
                  "src": "6424:13:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 9068,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6424:7:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6406:32:107"
            },
            "returnParameters": {
              "id": 9071,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6448:0:107"
            },
            "scope": 9179,
            "src": "6392:300:107",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 9149,
              "nodeType": "Block",
              "src": "7191:255:107",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 9122,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 9118,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 9110,
                          "src": "7209:5:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 9120,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7226:1:107",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 9119,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7218:7:107",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 9121,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7218:10:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "7209:19:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
                        "id": 9123,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7230:38:107",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
                          "typeString": "literal_string \"ERC20: approve from the zero address\""
                        },
                        "value": "ERC20: approve from the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
                          "typeString": "literal_string \"ERC20: approve from the zero address\""
                        }
                      ],
                      "id": 9117,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        12585,
                        12586
                      ],
                      "referencedDeclaration": 12586,
                      "src": "7201:7:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 9124,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7201:68:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 9125,
                  "nodeType": "ExpressionStatement",
                  "src": "7201:68:107"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 9131,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 9127,
                          "name": "spender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 9112,
                          "src": "7287:7:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 9129,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7306:1:107",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 9128,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7298:7:107",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 9130,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7298:10:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "7287:21:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
                        "id": 9132,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7310:36:107",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
                          "typeString": "literal_string \"ERC20: approve to the zero address\""
                        },
                        "value": "ERC20: approve to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
                          "typeString": "literal_string \"ERC20: approve to the zero address\""
                        }
                      ],
                      "id": 9126,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        12585,
                        12586
                      ],
                      "referencedDeclaration": 12586,
                      "src": "7279:7:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 9133,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7279:68:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 9134,
                  "nodeType": "ExpressionStatement",
                  "src": "7279:68:107"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 9141,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 9135,
                          "name": "_allowances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8801,
                          "src": "7358:11:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                            "typeString": "mapping(address => mapping(address => uint256))"
                          }
                        },
                        "id": 9138,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 9136,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 9110,
                          "src": "7370:5:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "7358:18:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 9139,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 9137,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9112,
                        "src": "7377:7:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "7358:27:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 9140,
                      "name": "value",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9114,
                      "src": "7388:5:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7358:35:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 9142,
                  "nodeType": "ExpressionStatement",
                  "src": "7358:35:107"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 9144,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9110,
                        "src": "7417:5:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 9145,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9112,
                        "src": "7424:7:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 9146,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9114,
                        "src": "7433:5:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 9143,
                      "name": "Approval",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9525,
                      "src": "7408:8:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 9147,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7408:31:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 9148,
                  "nodeType": "EmitStatement",
                  "src": "7403:36:107"
                }
              ]
            },
            "documentation": "@dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     * This is internal function is equivalent to `approve`, and can be used to\ne.g. set automatic allowances for certain subsystems, etc.\n     * Emits an `Approval` event.\n     * Requirements:\n     * - `owner` cannot be the zero address.\n- `spender` cannot be the zero address.",
            "id": 9150,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_approve",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 9115,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9110,
                  "name": "owner",
                  "nodeType": "VariableDeclaration",
                  "scope": 9150,
                  "src": "7135:13:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9109,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7135:7:107",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9112,
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 9150,
                  "src": "7150:15:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9111,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7150:7:107",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9114,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 9150,
                  "src": "7167:13:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 9113,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7167:7:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "7134:47:107"
            },
            "returnParameters": {
              "id": 9116,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7191:0:107"
            },
            "scope": 9179,
            "src": "7117:329:107",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 9177,
              "nodeType": "Block",
              "src": "7684:124:107",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 9158,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9152,
                        "src": "7700:7:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 9159,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9154,
                        "src": "7709:6:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 9157,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9108,
                      "src": "7694:5:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 9160,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7694:22:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 9161,
                  "nodeType": "ExpressionStatement",
                  "src": "7694:22:107"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 9163,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9152,
                        "src": "7735:7:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 9164,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12582,
                          "src": "7744:3:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 9165,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "7744:10:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 9173,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 9154,
                            "src": "7793:6:107",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 9166,
                                "name": "_allowances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 8801,
                                "src": "7756:11:107",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 9168,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 9167,
                                "name": "account",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 9152,
                                "src": "7768:7:107",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "7756:20:107",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 9171,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 9169,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 12582,
                                "src": "7777:3:107",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 9170,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "7777:10:107",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "7756:32:107",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 9172,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sub",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 5117,
                          "src": "7756:36:107",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 9174,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7756:44:107",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 9162,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9150,
                      "src": "7726:8:107",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 9175,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7726:75:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 9176,
                  "nodeType": "ExpressionStatement",
                  "src": "7726:75:107"
                }
              ]
            },
            "documentation": "@dev Destoys `amount` tokens from `account`.`amount` is then deducted\nfrom the caller's allowance.\n     * See `_burn` and `_approve`.",
            "id": 9178,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_burnFrom",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 9155,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9152,
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 9178,
                  "src": "7642:15:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9151,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7642:7:107",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9154,
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 9178,
                  "src": "7659:14:107",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 9153,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7659:7:107",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "7641:33:107"
            },
            "returnParameters": {
              "id": 9156,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7684:0:107"
            },
            "scope": 9179,
            "src": "7623:185:107",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 9180,
        "src": "1232:6578:107"
      }
    ],
    "src": "0:7811:107"
  },
  "bytecode": "608060405234801561001057600080fd5b506106eb806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806370a082311161005b57806370a0823114610149578063a457c2d71461016f578063a9059cbb1461019b578063dd62ed3e146101c757610088565b8063095ea7b31461008d57806318160ddd146100cd57806323b872dd146100e7578063395093511461011d575b600080fd5b6100b9600480360360408110156100a357600080fd5b506001600160a01b0381351690602001356101f5565b604080519115158252519081900360200190f35b6100d561020b565b60408051918252519081900360200190f35b6100b9600480360360608110156100fd57600080fd5b506001600160a01b03813581169160208101359091169060400135610211565b6100b96004803603604081101561013357600080fd5b506001600160a01b038135169060200135610268565b6100d56004803603602081101561015f57600080fd5b50356001600160a01b03166102a4565b6100b96004803603604081101561018557600080fd5b506001600160a01b0381351690602001356102bf565b6100b9600480360360408110156101b157600080fd5b506001600160a01b0381351690602001356102fb565b6100d5600480360360408110156101dd57600080fd5b506001600160a01b0381358116916020013516610308565b6000610202338484610333565b50600192915050565b60025490565b600061021e848484610425565b6001600160a01b03841660009081526001602090815260408083203380855292529091205461025e918691610259908663ffffffff61056d16565b610333565b5060019392505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610202918590610259908663ffffffff6105cd16565b6001600160a01b031660009081526020819052604090205490565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610202918590610259908663ffffffff61056d16565b6000610202338484610425565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b03831661037b57604051600160e51b62461bcd02815260040180806020018281038252602481526020018061069c6024913960400191505060405180910390fd5b6001600160a01b0382166103c357604051600160e51b62461bcd0281526004018080602001828103825260228152602001806106556022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831661046d57604051600160e51b62461bcd0281526004018080602001828103825260258152602001806106776025913960400191505060405180910390fd5b6001600160a01b0382166104b557604051600160e51b62461bcd0281526004018080602001828103825260238152602001806106326023913960400191505060405180910390fd5b6001600160a01b0383166000908152602081905260409020546104de908263ffffffff61056d16565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610513908263ffffffff6105cd16565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828211156105c75760408051600160e51b62461bcd02815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008282018381101561062a5760408051600160e51b62461bcd02815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b939250505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373a165627a7a7230582073de59637c1a813e0840a9757ce930062066300421c848c380faba2eadb8347c0029",
  "bytecodeSha1": "e0bba99020b178e7088343aa3c0b95a0c6ed023c",
  "compiler": {
    "minify_source": false,
    "optimize": true,
    "runs": 200,
    "version": "Version: 0.5.7+commit.6da8b019.Darwin.appleclang"
  },
  "contractName": "ERC20",
  "coverageMap": {
    "branches": {
      "contracts/open-zeppelin/contracts/math/SafeMath.sol": {
        "SafeMath.add": {
          "26": [
            946,
            952,
            true
          ]
        },
        "SafeMath.sub": {
          "25": [
            1359,
            1365,
            true
          ]
        }
      },
      "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol": {
        "ERC20._approve": {
          "27": [
            7209,
            7228,
            true
          ],
          "28": [
            7287,
            7308,
            true
          ]
        },
        "ERC20._transfer": {
          "29": [
            5176,
            5196,
            true
          ],
          "30": [
            5256,
            5279,
            true
          ]
        }
      },
      "contracts/open-zeppelin/contracts/token/ERC20/IERC20.sol": {}
    },
    "statements": {
      "contracts/open-zeppelin/contracts/math/SafeMath.sol": {
        "SafeMath.add": {
          "22": [
            911,
            928
          ],
          "23": [
            938,
            984
          ],
          "24": [
            1002,
            1003
          ]
        },
        "SafeMath.sub": {
          "20": [
            1351,
            1400
          ],
          "21": [
            1410,
            1427
          ]
        }
      },
      "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol": {
        "ERC20._approve": {
          "11": [
            7201,
            7269
          ],
          "12": [
            7279,
            7347
          ],
          "13": [
            7358,
            7393
          ],
          "14": [
            7403,
            7439
          ]
        },
        "ERC20._transfer": {
          "15": [
            5168,
            5238
          ],
          "16": [
            5248,
            5319
          ],
          "17": [
            5330,
            5379
          ],
          "18": [
            5389,
            5444
          ],
          "19": [
            5454,
            5494
          ]
        },
        "ERC20.allowance": {
          "10": [
            2281,
            2308
          ]
        },
        "ERC20.approve": {
          "0": [
            2534,
            2570
          ],
          "1": [
            2587,
            2591
          ]
        },
        "ERC20.balanceOf": {
          "7": [
            1744,
            1762
          ]
        },
        "ERC20.decreaseAllowance": {
          "8": [
            4493,
            4577
          ]
        },
        "ERC20.increaseAllowance": {
          "6": [
            3798,
            3877
          ]
        },
        "ERC20.totalSupply": {
          "2": [
            1584,
            1596
          ]
        },
        "ERC20.transfer": {
          "9": [
            2057,
            2097
          ]
        },
        "ERC20.transferFrom": {
          "3": [
            3160,
            3196
          ],
          "4": [
            3206,
            3279
          ],
          "5": [
            3296,
            3300
          ]
        }
      },
      "contracts/open-zeppelin/contracts/token/ERC20/IERC20.sol": {}
    }
  },
  "dependencies": [
    "IERC20",
    "SafeMath"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100885760003560e01c806370a082311161005b57806370a0823114610149578063a457c2d71461016f578063a9059cbb1461019b578063dd62ed3e146101c757610088565b8063095ea7b31461008d57806318160ddd146100cd57806323b872dd146100e7578063395093511461011d575b600080fd5b6100b9600480360360408110156100a357600080fd5b506001600160a01b0381351690602001356101f5565b604080519115158252519081900360200190f35b6100d561020b565b60408051918252519081900360200190f35b6100b9600480360360608110156100fd57600080fd5b506001600160a01b03813581169160208101359091169060400135610211565b6100b96004803603604081101561013357600080fd5b506001600160a01b038135169060200135610268565b6100d56004803603602081101561015f57600080fd5b50356001600160a01b03166102a4565b6100b96004803603604081101561018557600080fd5b506001600160a01b0381351690602001356102bf565b6100b9600480360360408110156101b157600080fd5b506001600160a01b0381351690602001356102fb565b6100d5600480360360408110156101dd57600080fd5b506001600160a01b0381358116916020013516610308565b6000610202338484610333565b50600192915050565b60025490565b600061021e848484610425565b6001600160a01b03841660009081526001602090815260408083203380855292529091205461025e918691610259908663ffffffff61056d16565b610333565b5060019392505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610202918590610259908663ffffffff6105cd16565b6001600160a01b031660009081526020819052604090205490565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610202918590610259908663ffffffff61056d16565b6000610202338484610425565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b03831661037b57604051600160e51b62461bcd02815260040180806020018281038252602481526020018061069c6024913960400191505060405180910390fd5b6001600160a01b0382166103c357604051600160e51b62461bcd0281526004018080602001828103825260228152602001806106556022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831661046d57604051600160e51b62461bcd0281526004018080602001828103825260258152602001806106776025913960400191505060405180910390fd5b6001600160a01b0382166104b557604051600160e51b62461bcd0281526004018080602001828103825260238152602001806106326023913960400191505060405180910390fd5b6001600160a01b0383166000908152602081905260409020546104de908263ffffffff61056d16565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610513908263ffffffff6105cd16565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828211156105c75760408051600160e51b62461bcd02815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008282018381101561062a5760408051600160e51b62461bcd02815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b939250505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373a165627a7a7230582073de59637c1a813e0840a9757ce930062066300421c848c380faba2eadb8347c0029",
  "deployedSourceMap": "1232:6578:107:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1232:6578:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2453:145;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;2453:145:107;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;1514:89;;;:::i;:::-;;;;;;;;;;;;;;;;3055:252;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3055:252:107;;;;;;;;;;;;;;;;;:::i;3702:203::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3702:203:107;;;;;;;;:::i;1661:108::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1661:108:107;-1:-1:-1;;;;;1661:108:107;;:::i;4392:213::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4392:213:107;;;;;;;;:::i;1972:153::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1972:153:107;;;;;;;;:::i;2183:132::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;2183:132:107;;;;;;;;;;:::i;2453:145::-;2518:4;2534:36;2543:10;2555:7;2564:5;2534:8;:36::i;:::-;-1:-1:-1;2587:4:107;2453:145;;;;:::o;1514:89::-;1584:12;;1514:89;:::o;3055:252::-;3144:4;3160:36;3170:6;3178:9;3189:6;3160:9;:36::i;:::-;-1:-1:-1;;;;;3235:19:107;;;;;;:11;:19;;;;;;;;3223:10;3235:31;;;;;;;;;3206:73;;3215:6;;3235:43;;3271:6;3235:43;:35;:43;:::i;:::-;3206:8;:73::i;:::-;-1:-1:-1;3296:4:107;3055:252;;;;;:::o;3702:203::-;3807:10;3782:4;3828:23;;;:11;:23;;;;;;;;-1:-1:-1;;;;;3828:32:107;;;;;;;;;;3782:4;;3798:79;;3819:7;;3828:48;;3865:10;3828:48;:36;:48;:::i;1661:108::-;-1:-1:-1;;;;;1744:18:107;1718:7;1744:18;;;;;;;;;;;;1661:108::o;4392:213::-;4502:10;4477:4;4523:23;;;:11;:23;;;;;;;;-1:-1:-1;;;;;4523:32:107;;;;;;;;;;4477:4;;4493:84;;4514:7;;4523:53;;4560:15;4523:53;:36;:53;:::i;1972:153::-;2041:4;2057:40;2067:10;2079:9;2090:6;2057:9;:40::i;2183:132::-;-1:-1:-1;;;;;2281:18:107;;;2255:7;2281:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;2183:132::o;7117:329::-;-1:-1:-1;;;;;7209:19:107;;7201:68;;;;-1:-1:-1;;;;;7201:68:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7287:21:107;;7279:68;;;;-1:-1:-1;;;;;7279:68:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7358:18:107;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:35;;;7408:31;;;;;;;;;;;;;;;;;7117:329;;;:::o;5079:422::-;-1:-1:-1;;;;;5176:20:107;;5168:70;;;;-1:-1:-1;;;;;5168:70:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5256:23:107;;5248:71;;;;-1:-1:-1;;;;;5248:71:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5350:17:107;;:9;:17;;;;;;;;;;;:29;;5372:6;5350:29;:21;:29;:::i;:::-;-1:-1:-1;;;;;5330:17:107;;;:9;:17;;;;;;;;;;;:49;;;;5412:20;;;;;;;:32;;5437:6;5412:32;:24;:32;:::i;:::-;-1:-1:-1;;;;;5389:20:107;;;:9;:20;;;;;;;;;;;;:55;;;;5459:35;;;;;;;5389:20;;5459:35;;;;;;;;;;;;;5079:422;;;:::o;1274:179:41:-;1332:7;1364:1;1359;:6;;1351:49;;;;;-1:-1:-1;;;;;1351:49:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1422:5:41;;;1274:179::o;834:176::-;892:7;923:5;;;946:6;;;;938:46;;;;;-1:-1:-1;;;;;938:46:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:1;834:176;-1:-1:-1;;;834:176:41:o",
  "offset": [
    1232,
    7810
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x149 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x19B JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1C7 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xCD JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xE7 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x11D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x1F5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xD5 PUSH2 0x20B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xB9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0xFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x211 JUMP JUMPDEST PUSH2 0xB9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x133 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x268 JUMP JUMPDEST PUSH2 0xD5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x15F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2A4 JUMP JUMPDEST PUSH2 0xB9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x185 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x2BF JUMP JUMPDEST PUSH2 0xB9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x2FB JUMP JUMPDEST PUSH2 0xD5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x308 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x202 CALLER DUP5 DUP5 PUSH2 0x333 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21E DUP5 DUP5 DUP5 PUSH2 0x425 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP1 DUP6 MSTORE SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH2 0x25E SWAP2 DUP7 SWAP2 PUSH2 0x259 SWAP1 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x56D AND JUMP JUMPDEST PUSH2 0x333 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 PUSH2 0x202 SWAP2 DUP6 SWAP1 PUSH2 0x259 SWAP1 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x5CD AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 PUSH2 0x202 SWAP2 DUP6 SWAP1 PUSH2 0x259 SWAP1 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x56D AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0x202 CALLER DUP5 DUP5 PUSH2 0x425 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x37B JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x69C PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x3C3 JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x655 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP2 MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x46D JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x677 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4B5 JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x632 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4DE SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x56D AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x513 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x5CD AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP3 DUP8 AND SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x5C7 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x62A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0xE5 SHL PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F766520746F20746865207A65726F20616464 PUSH19 0x65737345524332303A207472616E7366657220 PUSH7 0x726F6D20746865 KECCAK256 PUSH27 0x65726F206164647265737345524332303A20617070726F76652066 PUSH19 0x6F6D20746865207A65726F2061646472657373 LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH20 0xDE59637C1A813E0840A9757CE930062066300421 0xc8 0x48 0xc3 DUP1 STATICCALL 0xba 0x2e 0xad 0xb8 CALLVALUE PUSH29 0x29000000000000000000000000000000000000000000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x80"
    },
    "2": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "4": {
      "offset": [
        1232,
        7810
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "5": {
      "offset": [
        1232,
        7810
      ],
      "op": "CALLVALUE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "6": {
      "op": "DUP1"
    },
    "7": {
      "op": "ISZERO"
    },
    "8": {
      "op": "PUSH2",
      "value": "0x10"
    },
    "11": {
      "op": "JUMPI"
    },
    "12": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "14": {
      "op": "DUP1"
    },
    "15": {
      "op": "REVERT"
    },
    "16": {
      "op": "JUMPDEST"
    },
    "17": {
      "offset": [
        1232,
        7810
      ],
      "op": "POP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "18": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x4"
    },
    "20": {
      "offset": [
        1232,
        7810
      ],
      "op": "CALLDATASIZE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "21": {
      "offset": [
        1232,
        7810
      ],
      "op": "LT",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "22": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x88"
    },
    "25": {
      "offset": [
        1232,
        7810
      ],
      "op": "JUMPI",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "26": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x0"
    },
    "28": {
      "offset": [
        1232,
        7810
      ],
      "op": "CALLDATALOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "29": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0xE0"
    },
    "31": {
      "offset": [
        1232,
        7810
      ],
      "op": "SHR",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "32": {
      "offset": [
        1232,
        7810
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "33": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x70A08231"
    },
    "38": {
      "offset": [
        1232,
        7810
      ],
      "op": "GT",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "39": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x5B"
    },
    "42": {
      "offset": [
        1232,
        7810
      ],
      "op": "JUMPI",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "43": {
      "offset": [
        1232,
        7810
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "44": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x70A08231"
    },
    "49": {
      "offset": [
        1232,
        7810
      ],
      "op": "EQ",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "50": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x149"
    },
    "53": {
      "offset": [
        1232,
        7810
      ],
      "op": "JUMPI",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "54": {
      "offset": [
        1232,
        7810
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "55": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0xA457C2D7"
    },
    "60": {
      "offset": [
        1232,
        7810
      ],
      "op": "EQ",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "61": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x16F"
    },
    "64": {
      "offset": [
        1232,
        7810
      ],
      "op": "JUMPI",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "65": {
      "offset": [
        1232,
        7810
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "66": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0xA9059CBB"
    },
    "71": {
      "offset": [
        1232,
        7810
      ],
      "op": "EQ",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "72": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x19B"
    },
    "75": {
      "offset": [
        1232,
        7810
      ],
      "op": "JUMPI",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "76": {
      "offset": [
        1232,
        7810
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "77": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0xDD62ED3E"
    },
    "82": {
      "offset": [
        1232,
        7810
      ],
      "op": "EQ",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "83": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x1C7"
    },
    "86": {
      "offset": [
        1232,
        7810
      ],
      "op": "JUMPI",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "87": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x88"
    },
    "90": {
      "offset": [
        1232,
        7810
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "91": {
      "offset": [
        1232,
        7810
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "92": {
      "offset": [
        1232,
        7810
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "93": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x95EA7B3"
    },
    "98": {
      "offset": [
        1232,
        7810
      ],
      "op": "EQ",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "99": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x8D"
    },
    "102": {
      "offset": [
        1232,
        7810
      ],
      "op": "JUMPI",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "103": {
      "offset": [
        1232,
        7810
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "104": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x18160DDD"
    },
    "109": {
      "offset": [
        1232,
        7810
      ],
      "op": "EQ",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "110": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0xCD"
    },
    "113": {
      "offset": [
        1232,
        7810
      ],
      "op": "JUMPI",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "114": {
      "offset": [
        1232,
        7810
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "115": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x23B872DD"
    },
    "120": {
      "offset": [
        1232,
        7810
      ],
      "op": "EQ",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "121": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0xE7"
    },
    "124": {
      "offset": [
        1232,
        7810
      ],
      "op": "JUMPI",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "125": {
      "offset": [
        1232,
        7810
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "126": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x39509351"
    },
    "131": {
      "offset": [
        1232,
        7810
      ],
      "op": "EQ",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "132": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x11D"
    },
    "135": {
      "offset": [
        1232,
        7810
      ],
      "op": "JUMPI",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "136": {
      "offset": [
        1232,
        7810
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "137": {
      "offset": [
        1232,
        7810
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x0"
    },
    "139": {
      "offset": [
        1232,
        7810
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "140": {
      "first_revert": true,
      "offset": [
        1232,
        7810
      ],
      "op": "REVERT",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "141": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "142": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0xB9"
    },
    "145": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x4"
    },
    "147": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "148": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "CALLDATASIZE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "149": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "SUB",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "150": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "152": {
      "op": "DUP2"
    },
    "153": {
      "op": "LT"
    },
    "154": {
      "op": "ISZERO"
    },
    "155": {
      "op": "PUSH2",
      "value": "0xA3"
    },
    "158": {
      "op": "JUMPI"
    },
    "159": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "161": {
      "op": "DUP1"
    },
    "162": {
      "op": "REVERT"
    },
    "163": {
      "op": "JUMPDEST"
    },
    "164": {
      "op": "POP"
    },
    "165": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "167": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "169": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "171": {
      "op": "SHL"
    },
    "172": {
      "op": "SUB"
    },
    "173": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "174": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "CALLDATALOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "175": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "176": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "177": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "179": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "180": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "CALLDATALOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "181": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x1F5"
    },
    "184": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        2453,
        2598
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "185": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "186": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "188": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "189": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "MLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "190": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "191": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "ISZERO",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "192": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "ISZERO",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "193": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "194": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "195": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "MLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "196": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "197": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "198": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "199": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "SUB",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "200": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "202": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "203": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "204": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "RETURN",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "205": {
      "fn": "ERC20.totalSupply",
      "offset": [
        1514,
        1603
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "206": {
      "fn": "ERC20.totalSupply",
      "offset": [
        1514,
        1603
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0xD5"
    },
    "209": {
      "fn": "ERC20.totalSupply",
      "offset": [
        1514,
        1603
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20B"
    },
    "212": {
      "fn": "ERC20.totalSupply",
      "jump": "i",
      "offset": [
        1514,
        1603
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "213": {
      "fn": "ERC20.totalSupply",
      "offset": [
        1514,
        1603
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "214": {
      "fn": "ERC20.totalSupply",
      "offset": [
        1514,
        1603
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "216": {
      "fn": "ERC20.totalSupply",
      "offset": [
        1514,
        1603
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "217": {
      "fn": "ERC20.totalSupply",
      "offset": [
        1514,
        1603
      ],
      "op": "MLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "218": {
      "fn": "ERC20.totalSupply",
      "offset": [
        1514,
        1603
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "219": {
      "fn": "ERC20.totalSupply",
      "offset": [
        1514,
        1603
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "220": {
      "fn": "ERC20.totalSupply",
      "offset": [
        1514,
        1603
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "221": {
      "fn": "ERC20.totalSupply",
      "offset": [
        1514,
        1603
      ],
      "op": "MLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "222": {
      "fn": "ERC20.totalSupply",
      "offset": [
        1514,
        1603
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "223": {
      "fn": "ERC20.totalSupply",
      "offset": [
        1514,
        1603
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "224": {
      "fn": "ERC20.totalSupply",
      "offset": [
        1514,
        1603
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "225": {
      "fn": "ERC20.totalSupply",
      "offset": [
        1514,
        1603
      ],
      "op": "SUB",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "226": {
      "fn": "ERC20.totalSupply",
      "offset": [
        1514,
        1603
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "228": {
      "fn": "ERC20.totalSupply",
      "offset": [
        1514,
        1603
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "229": {
      "fn": "ERC20.totalSupply",
      "offset": [
        1514,
        1603
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "230": {
      "fn": "ERC20.totalSupply",
      "offset": [
        1514,
        1603
      ],
      "op": "RETURN",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "231": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "232": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0xB9"
    },
    "235": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x4"
    },
    "237": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "238": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "CALLDATASIZE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "239": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "SUB",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "240": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "242": {
      "op": "DUP2"
    },
    "243": {
      "op": "LT"
    },
    "244": {
      "op": "ISZERO"
    },
    "245": {
      "op": "PUSH2",
      "value": "0xFD"
    },
    "248": {
      "op": "JUMPI"
    },
    "249": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "251": {
      "op": "DUP1"
    },
    "252": {
      "op": "REVERT"
    },
    "253": {
      "op": "JUMPDEST"
    },
    "254": {
      "op": "POP"
    },
    "255": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "257": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "259": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "261": {
      "op": "SHL"
    },
    "262": {
      "op": "SUB"
    },
    "263": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "264": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "CALLDATALOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "265": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "266": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "267": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "268": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "270": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "271": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "272": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "CALLDATALOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "273": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "274": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "275": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "276": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "277": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "279": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "280": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "CALLDATALOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "281": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x211"
    },
    "284": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        3055,
        3307
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "285": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3702,
        3905
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "286": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3702,
        3905
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0xB9"
    },
    "289": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3702,
        3905
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x4"
    },
    "291": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3702,
        3905
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "292": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3702,
        3905
      ],
      "op": "CALLDATASIZE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "293": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3702,
        3905
      ],
      "op": "SUB",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "294": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "296": {
      "op": "DUP2"
    },
    "297": {
      "op": "LT"
    },
    "298": {
      "op": "ISZERO"
    },
    "299": {
      "op": "PUSH2",
      "value": "0x133"
    },
    "302": {
      "op": "JUMPI"
    },
    "303": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "305": {
      "op": "DUP1"
    },
    "306": {
      "op": "REVERT"
    },
    "307": {
      "op": "JUMPDEST"
    },
    "308": {
      "op": "POP"
    },
    "309": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "311": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "313": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "315": {
      "op": "SHL"
    },
    "316": {
      "op": "SUB"
    },
    "317": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3702,
        3905
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "318": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3702,
        3905
      ],
      "op": "CALLDATALOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "319": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3702,
        3905
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "320": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3702,
        3905
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "321": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3702,
        3905
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "323": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3702,
        3905
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "324": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3702,
        3905
      ],
      "op": "CALLDATALOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "325": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3702,
        3905
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x268"
    },
    "328": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        3702,
        3905
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "329": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1661,
        1769
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "330": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1661,
        1769
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0xD5"
    },
    "333": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1661,
        1769
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x4"
    },
    "335": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1661,
        1769
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "336": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1661,
        1769
      ],
      "op": "CALLDATASIZE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "337": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1661,
        1769
      ],
      "op": "SUB",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "338": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "340": {
      "op": "DUP2"
    },
    "341": {
      "op": "LT"
    },
    "342": {
      "op": "ISZERO"
    },
    "343": {
      "op": "PUSH2",
      "value": "0x15F"
    },
    "346": {
      "op": "JUMPI"
    },
    "347": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "349": {
      "op": "DUP1"
    },
    "350": {
      "op": "REVERT"
    },
    "351": {
      "op": "JUMPDEST"
    },
    "352": {
      "op": "POP"
    },
    "353": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1661,
        1769
      ],
      "op": "CALLDATALOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "354": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "356": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "358": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "360": {
      "op": "SHL"
    },
    "361": {
      "op": "SUB"
    },
    "362": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1661,
        1769
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "363": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1661,
        1769
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x2A4"
    },
    "366": {
      "fn": "ERC20.balanceOf",
      "jump": "i",
      "offset": [
        1661,
        1769
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "367": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4392,
        4605
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "368": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4392,
        4605
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0xB9"
    },
    "371": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4392,
        4605
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x4"
    },
    "373": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4392,
        4605
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "374": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4392,
        4605
      ],
      "op": "CALLDATASIZE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "375": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4392,
        4605
      ],
      "op": "SUB",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "376": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "378": {
      "op": "DUP2"
    },
    "379": {
      "op": "LT"
    },
    "380": {
      "op": "ISZERO"
    },
    "381": {
      "op": "PUSH2",
      "value": "0x185"
    },
    "384": {
      "op": "JUMPI"
    },
    "385": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "387": {
      "op": "DUP1"
    },
    "388": {
      "op": "REVERT"
    },
    "389": {
      "op": "JUMPDEST"
    },
    "390": {
      "op": "POP"
    },
    "391": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "393": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "395": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "397": {
      "op": "SHL"
    },
    "398": {
      "op": "SUB"
    },
    "399": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4392,
        4605
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "400": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4392,
        4605
      ],
      "op": "CALLDATALOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "401": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4392,
        4605
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "402": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4392,
        4605
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "403": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4392,
        4605
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "405": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4392,
        4605
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "406": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4392,
        4605
      ],
      "op": "CALLDATALOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "407": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4392,
        4605
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x2BF"
    },
    "410": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        4392,
        4605
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "411": {
      "fn": "ERC20.transfer",
      "offset": [
        1972,
        2125
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "412": {
      "fn": "ERC20.transfer",
      "offset": [
        1972,
        2125
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0xB9"
    },
    "415": {
      "fn": "ERC20.transfer",
      "offset": [
        1972,
        2125
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x4"
    },
    "417": {
      "fn": "ERC20.transfer",
      "offset": [
        1972,
        2125
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "418": {
      "fn": "ERC20.transfer",
      "offset": [
        1972,
        2125
      ],
      "op": "CALLDATASIZE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "419": {
      "fn": "ERC20.transfer",
      "offset": [
        1972,
        2125
      ],
      "op": "SUB",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "420": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "422": {
      "op": "DUP2"
    },
    "423": {
      "op": "LT"
    },
    "424": {
      "op": "ISZERO"
    },
    "425": {
      "op": "PUSH2",
      "value": "0x1B1"
    },
    "428": {
      "op": "JUMPI"
    },
    "429": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "431": {
      "op": "DUP1"
    },
    "432": {
      "op": "REVERT"
    },
    "433": {
      "op": "JUMPDEST"
    },
    "434": {
      "op": "POP"
    },
    "435": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "437": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "439": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "441": {
      "op": "SHL"
    },
    "442": {
      "op": "SUB"
    },
    "443": {
      "fn": "ERC20.transfer",
      "offset": [
        1972,
        2125
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "444": {
      "fn": "ERC20.transfer",
      "offset": [
        1972,
        2125
      ],
      "op": "CALLDATALOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "445": {
      "fn": "ERC20.transfer",
      "offset": [
        1972,
        2125
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "446": {
      "fn": "ERC20.transfer",
      "offset": [
        1972,
        2125
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "447": {
      "fn": "ERC20.transfer",
      "offset": [
        1972,
        2125
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "449": {
      "fn": "ERC20.transfer",
      "offset": [
        1972,
        2125
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "450": {
      "fn": "ERC20.transfer",
      "offset": [
        1972,
        2125
      ],
      "op": "CALLDATALOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "451": {
      "fn": "ERC20.transfer",
      "offset": [
        1972,
        2125
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x2FB"
    },
    "454": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        1972,
        2125
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "455": {
      "fn": "ERC20.allowance",
      "offset": [
        2183,
        2315
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "456": {
      "fn": "ERC20.allowance",
      "offset": [
        2183,
        2315
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0xD5"
    },
    "459": {
      "fn": "ERC20.allowance",
      "offset": [
        2183,
        2315
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x4"
    },
    "461": {
      "fn": "ERC20.allowance",
      "offset": [
        2183,
        2315
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "462": {
      "fn": "ERC20.allowance",
      "offset": [
        2183,
        2315
      ],
      "op": "CALLDATASIZE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "463": {
      "fn": "ERC20.allowance",
      "offset": [
        2183,
        2315
      ],
      "op": "SUB",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "464": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "466": {
      "op": "DUP2"
    },
    "467": {
      "op": "LT"
    },
    "468": {
      "op": "ISZERO"
    },
    "469": {
      "op": "PUSH2",
      "value": "0x1DD"
    },
    "472": {
      "op": "JUMPI"
    },
    "473": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "475": {
      "op": "DUP1"
    },
    "476": {
      "op": "REVERT"
    },
    "477": {
      "op": "JUMPDEST"
    },
    "478": {
      "op": "POP"
    },
    "479": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "481": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "483": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "485": {
      "op": "SHL"
    },
    "486": {
      "op": "SUB"
    },
    "487": {
      "fn": "ERC20.allowance",
      "offset": [
        2183,
        2315
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "488": {
      "fn": "ERC20.allowance",
      "offset": [
        2183,
        2315
      ],
      "op": "CALLDATALOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "489": {
      "fn": "ERC20.allowance",
      "offset": [
        2183,
        2315
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "490": {
      "fn": "ERC20.allowance",
      "offset": [
        2183,
        2315
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "491": {
      "fn": "ERC20.allowance",
      "offset": [
        2183,
        2315
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "492": {
      "fn": "ERC20.allowance",
      "offset": [
        2183,
        2315
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "494": {
      "fn": "ERC20.allowance",
      "offset": [
        2183,
        2315
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "495": {
      "fn": "ERC20.allowance",
      "offset": [
        2183,
        2315
      ],
      "op": "CALLDATALOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "496": {
      "fn": "ERC20.allowance",
      "offset": [
        2183,
        2315
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "497": {
      "fn": "ERC20.allowance",
      "offset": [
        2183,
        2315
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x308"
    },
    "500": {
      "fn": "ERC20.allowance",
      "jump": "i",
      "offset": [
        2183,
        2315
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "501": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "502": {
      "fn": "ERC20.approve",
      "offset": [
        2518,
        2522
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x0"
    },
    "504": {
      "fn": "ERC20.approve",
      "offset": [
        2534,
        2570
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "statement": 0,
      "value": "0x202"
    },
    "507": {
      "fn": "ERC20.approve",
      "offset": [
        2543,
        2553
      ],
      "op": "CALLER",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "508": {
      "fn": "ERC20.approve",
      "offset": [
        2555,
        2562
      ],
      "op": "DUP5",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "509": {
      "fn": "ERC20.approve",
      "offset": [
        2564,
        2569
      ],
      "op": "DUP5",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "510": {
      "fn": "ERC20.approve",
      "offset": [
        2534,
        2542
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x333"
    },
    "513": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        2534,
        2570
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "514": {
      "fn": "ERC20.approve",
      "offset": [
        2534,
        2570
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "515": {
      "op": "POP"
    },
    "516": {
      "fn": "ERC20.approve",
      "offset": [
        2587,
        2591
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "statement": 1,
      "value": "0x1"
    },
    "518": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "SWAP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "519": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "520": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "POP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "521": {
      "fn": "ERC20.approve",
      "offset": [
        2453,
        2598
      ],
      "op": "POP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "522": {
      "fn": "ERC20.approve",
      "jump": "o",
      "offset": [
        2453,
        2598
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "523": {
      "fn": "ERC20.totalSupply",
      "offset": [
        1514,
        1603
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "524": {
      "fn": "ERC20.totalSupply",
      "offset": [
        1584,
        1596
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "statement": 2,
      "value": "0x2"
    },
    "526": {
      "fn": "ERC20.totalSupply",
      "offset": [
        1584,
        1596
      ],
      "op": "SLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "527": {
      "fn": "ERC20.totalSupply",
      "offset": [
        1514,
        1603
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "528": {
      "fn": "ERC20.totalSupply",
      "jump": "o",
      "offset": [
        1514,
        1603
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "529": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "530": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3144,
        3148
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x0"
    },
    "532": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3160,
        3196
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "statement": 3,
      "value": "0x21E"
    },
    "535": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3170,
        3176
      ],
      "op": "DUP5",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "536": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3178,
        3187
      ],
      "op": "DUP5",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "537": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3189,
        3195
      ],
      "op": "DUP5",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "538": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3160,
        3169
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x425"
    },
    "541": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        3160,
        3196
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "542": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3160,
        3196
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "543": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "545": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "547": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "549": {
      "op": "SHL"
    },
    "550": {
      "op": "SUB"
    },
    "551": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3254
      ],
      "op": "DUP5",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "statement": 4
    },
    "552": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3254
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "553": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3254
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x0"
    },
    "555": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3254
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "556": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3254
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "557": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3254
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "558": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3246
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x1"
    },
    "560": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3254
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "562": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3254
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "563": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3254
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "564": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3254
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "565": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3254
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "567": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3254
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "568": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3254
      ],
      "op": "DUP4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "569": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3254
      ],
      "op": "KECCAK256",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "570": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3223,
        3233
      ],
      "op": "CALLER",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "571": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3266
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "572": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3266
      ],
      "op": "DUP6",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "573": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3266
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "574": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3266
      ],
      "op": "SWAP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "575": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3266
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "576": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3266
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "577": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3266
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "578": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3266
      ],
      "op": "KECCAK256",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "579": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3266
      ],
      "op": "SLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "580": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3206,
        3279
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x25E"
    },
    "583": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3206,
        3279
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "584": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3215,
        3221
      ],
      "op": "DUP7",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "585": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3215,
        3221
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "586": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3278
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x259"
    },
    "589": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3278
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "590": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3271,
        3277
      ],
      "op": "DUP7",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "591": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3278
      ],
      "op": "PUSH4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0xFFFFFFFF"
    },
    "596": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3270
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x56D"
    },
    "599": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3278
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "600": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        3235,
        3278
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "601": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3235,
        3278
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "602": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3206,
        3214
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x333"
    },
    "605": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        3206,
        3279
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "606": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3206,
        3279
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "607": {
      "op": "POP"
    },
    "608": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3296,
        3300
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "statement": 5,
      "value": "0x1"
    },
    "610": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "SWAP4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "611": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "SWAP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "612": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "POP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "613": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "POP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "614": {
      "fn": "ERC20.transferFrom",
      "offset": [
        3055,
        3307
      ],
      "op": "POP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "615": {
      "fn": "ERC20.transferFrom",
      "jump": "o",
      "offset": [
        3055,
        3307
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "616": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3702,
        3905
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "617": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3807,
        3817
      ],
      "op": "CALLER",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "statement": 6
    },
    "618": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3782,
        3786
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x0"
    },
    "620": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3851
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "621": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3851
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "622": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3851
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "623": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3839
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x1"
    },
    "625": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3851
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "627": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3851
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "628": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3851
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "629": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3851
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "630": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3851
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "632": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3851
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "633": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3851
      ],
      "op": "DUP4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "634": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3851
      ],
      "op": "KECCAK256",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "635": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "637": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "639": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "641": {
      "op": "SHL"
    },
    "642": {
      "op": "SUB"
    },
    "643": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3860
      ],
      "op": "DUP8",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "644": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3860
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "645": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3860
      ],
      "op": "DUP5",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "646": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3860
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "647": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3860
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "648": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3860
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "649": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3860
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "650": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3860
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "651": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3860
      ],
      "op": "KECCAK256",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "652": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3860
      ],
      "op": "SLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "653": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3782,
        3786
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "654": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3782,
        3786
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "655": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3798,
        3877
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x202"
    },
    "658": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3798,
        3877
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "659": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3819,
        3826
      ],
      "op": "DUP6",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "660": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3819,
        3826
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "661": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3876
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x259"
    },
    "664": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3876
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "665": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3865,
        3875
      ],
      "op": "DUP7",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "666": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3876
      ],
      "op": "PUSH4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0xFFFFFFFF"
    },
    "671": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3864
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x5CD"
    },
    "674": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        3828,
        3876
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "675": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        3828,
        3876
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "676": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1661,
        1769
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "677": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "679": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "681": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "683": {
      "op": "SHL"
    },
    "684": {
      "op": "SUB"
    },
    "685": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1744,
        1762
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "statement": 7
    },
    "686": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1718,
        1725
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x0"
    },
    "688": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1744,
        1762
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "689": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1744,
        1762
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "690": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1744,
        1762
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "691": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1744,
        1762
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "693": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1744,
        1762
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "694": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1744,
        1762
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "695": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1744,
        1762
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "696": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1744,
        1762
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "698": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1744,
        1762
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "699": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1744,
        1762
      ],
      "op": "KECCAK256",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "700": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1744,
        1762
      ],
      "op": "SLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "701": {
      "fn": "ERC20.balanceOf",
      "offset": [
        1744,
        1762
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "702": {
      "fn": "ERC20.balanceOf",
      "jump": "o",
      "offset": [
        1661,
        1769
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "703": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4392,
        4605
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "704": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4502,
        4512
      ],
      "op": "CALLER",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "statement": 8
    },
    "705": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4477,
        4481
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x0"
    },
    "707": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4546
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "708": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4546
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "709": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4546
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "710": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4534
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x1"
    },
    "712": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4546
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "714": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4546
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "715": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4546
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "716": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4546
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "717": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4546
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "719": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4546
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "720": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4546
      ],
      "op": "DUP4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "721": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4546
      ],
      "op": "KECCAK256",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "722": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "724": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "726": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "728": {
      "op": "SHL"
    },
    "729": {
      "op": "SUB"
    },
    "730": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4555
      ],
      "op": "DUP8",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "731": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4555
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "732": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4555
      ],
      "op": "DUP5",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "733": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4555
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "734": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4555
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "735": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4555
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "736": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4555
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "737": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4555
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "738": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4555
      ],
      "op": "KECCAK256",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "739": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4555
      ],
      "op": "SLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "740": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4477,
        4481
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "741": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4477,
        4481
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "742": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4493,
        4577
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x202"
    },
    "745": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4493,
        4577
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "746": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4514,
        4521
      ],
      "op": "DUP6",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "747": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4514,
        4521
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "748": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4576
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x259"
    },
    "751": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4576
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "752": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4560,
        4575
      ],
      "op": "DUP7",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "753": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4576
      ],
      "op": "PUSH4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0xFFFFFFFF"
    },
    "758": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4559
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x56D"
    },
    "761": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        4523,
        4576
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "762": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        4523,
        4576
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "763": {
      "fn": "ERC20.transfer",
      "offset": [
        1972,
        2125
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "764": {
      "fn": "ERC20.transfer",
      "offset": [
        2041,
        2045
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x0"
    },
    "766": {
      "fn": "ERC20.transfer",
      "offset": [
        2057,
        2097
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "statement": 9,
      "value": "0x202"
    },
    "769": {
      "fn": "ERC20.transfer",
      "offset": [
        2067,
        2077
      ],
      "op": "CALLER",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "770": {
      "fn": "ERC20.transfer",
      "offset": [
        2079,
        2088
      ],
      "op": "DUP5",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "771": {
      "fn": "ERC20.transfer",
      "offset": [
        2090,
        2096
      ],
      "op": "DUP5",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "772": {
      "fn": "ERC20.transfer",
      "offset": [
        2057,
        2066
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x425"
    },
    "775": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        2057,
        2097
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "776": {
      "fn": "ERC20.allowance",
      "offset": [
        2183,
        2315
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "777": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "779": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "781": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "783": {
      "op": "SHL"
    },
    "784": {
      "op": "SUB"
    },
    "785": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2299
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "statement": 10
    },
    "786": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2299
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "787": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2299
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "788": {
      "fn": "ERC20.allowance",
      "offset": [
        2255,
        2262
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x0"
    },
    "790": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2299
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "791": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2299
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "792": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2299
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "793": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2292
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x1"
    },
    "795": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2299
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "797": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2299
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "798": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2299
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "799": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2299
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "800": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2299
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "802": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2299
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "803": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2299
      ],
      "op": "DUP4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "804": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2299
      ],
      "op": "KECCAK256",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "805": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2308
      ],
      "op": "SWAP4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "806": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2308
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "807": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2308
      ],
      "op": "SWAP5",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "808": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2308
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "809": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2308
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "810": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2308
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "811": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2308
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "812": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2308
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "813": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2308
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "814": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2308
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "815": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2308
      ],
      "op": "KECCAK256",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "816": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2308
      ],
      "op": "SLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "817": {
      "fn": "ERC20.allowance",
      "offset": [
        2281,
        2308
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "818": {
      "fn": "ERC20.allowance",
      "jump": "o",
      "offset": [
        2183,
        2315
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "819": {
      "fn": "ERC20._approve",
      "offset": [
        7117,
        7446
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "820": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "822": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "824": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "826": {
      "op": "SHL"
    },
    "827": {
      "op": "SUB"
    },
    "828": {
      "fn": "ERC20._approve",
      "offset": [
        7209,
        7228
      ],
      "op": "DUP4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "statement": 11
    },
    "829": {
      "branch": 27,
      "fn": "ERC20._approve",
      "offset": [
        7209,
        7228
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "830": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x37B"
    },
    "833": {
      "branch": 27,
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "JUMPI",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "834": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "836": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "MLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "837": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "839": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "841": {
      "op": "SHL"
    },
    "842": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "846": {
      "op": "MUL"
    },
    "847": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "848": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "849": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x4"
    },
    "851": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "852": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "853": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "854": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "856": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "857": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "858": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "859": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "SUB",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "860": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "861": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "862": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x24"
    },
    "864": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "865": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "866": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "868": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "869": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "870": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x69C"
    },
    "873": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x24"
    },
    "875": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "876": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "CODECOPY",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "877": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "879": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "880": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "881": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "POP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "882": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "POP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "883": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "885": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "MLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "886": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "887": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "888": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "SUB",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "889": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "890": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "REVERT",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "891": {
      "fn": "ERC20._approve",
      "offset": [
        7201,
        7269
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "892": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "894": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "896": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "898": {
      "op": "SHL"
    },
    "899": {
      "op": "SUB"
    },
    "900": {
      "fn": "ERC20._approve",
      "offset": [
        7287,
        7308
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "statement": 12
    },
    "901": {
      "branch": 28,
      "fn": "ERC20._approve",
      "offset": [
        7287,
        7308
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "902": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x3C3"
    },
    "905": {
      "branch": 28,
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "JUMPI",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "906": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "908": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "MLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "909": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "911": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "913": {
      "op": "SHL"
    },
    "914": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "918": {
      "op": "MUL"
    },
    "919": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "920": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "921": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x4"
    },
    "923": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "924": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "925": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "926": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "928": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "929": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "930": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "931": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "SUB",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "932": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "933": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "934": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x22"
    },
    "936": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "937": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "938": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "940": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "941": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "942": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x655"
    },
    "945": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x22"
    },
    "947": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "948": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "CODECOPY",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "949": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "951": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "952": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "953": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "POP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "954": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "POP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "955": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "957": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "MLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "958": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "959": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "960": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "SUB",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "961": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "962": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "REVERT",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "963": {
      "fn": "ERC20._approve",
      "offset": [
        7279,
        7347
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "964": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "966": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "968": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "970": {
      "op": "SHL"
    },
    "971": {
      "op": "SUB"
    },
    "972": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7376
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "statement": 13
    },
    "973": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7376
      ],
      "op": "DUP5",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "974": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7376
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "975": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7376
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x0"
    },
    "977": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7376
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "978": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7376
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "979": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7376
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "980": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7369
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x1"
    },
    "982": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7376
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "984": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7376
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "985": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7376
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "986": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7376
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "987": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7376
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "989": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7376
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "990": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7376
      ],
      "op": "DUP4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "991": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7376
      ],
      "op": "KECCAK256",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "992": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7385
      ],
      "op": "SWAP5",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "993": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7385
      ],
      "op": "DUP8",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "994": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7385
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "995": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7385
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "996": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7385
      ],
      "op": "DUP5",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "997": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7385
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "998": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7385
      ],
      "op": "SWAP5",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "999": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7385
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1000": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7385
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1001": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7385
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1002": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7385
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1003": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7385
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1004": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7385
      ],
      "op": "KECCAK256",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1005": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7393
      ],
      "op": "DUP6",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1006": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7393
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1007": {
      "fn": "ERC20._approve",
      "offset": [
        7358,
        7393
      ],
      "op": "SSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1008": {
      "fn": "ERC20._approve",
      "offset": [
        7408,
        7439
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "statement": 14
    },
    "1009": {
      "fn": "ERC20._approve",
      "offset": [
        7408,
        7439
      ],
      "op": "MLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1010": {
      "fn": "ERC20._approve",
      "offset": [
        7408,
        7439
      ],
      "op": "DUP6",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1011": {
      "fn": "ERC20._approve",
      "offset": [
        7408,
        7439
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1012": {
      "fn": "ERC20._approve",
      "offset": [
        7408,
        7439
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1013": {
      "fn": "ERC20._approve",
      "offset": [
        7408,
        7439
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1014": {
      "fn": "ERC20._approve",
      "offset": [
        7408,
        7439
      ],
      "op": "MLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1015": {
      "fn": "ERC20._approve",
      "offset": [
        7408,
        7439
      ],
      "op": "PUSH32",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
    },
    "1048": {
      "fn": "ERC20._approve",
      "offset": [
        7408,
        7439
      ],
      "op": "SWAP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1049": {
      "fn": "ERC20._approve",
      "offset": [
        7408,
        7439
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1050": {
      "fn": "ERC20._approve",
      "offset": [
        7408,
        7439
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1051": {
      "fn": "ERC20._approve",
      "offset": [
        7408,
        7439
      ],
      "op": "SUB",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1052": {
      "fn": "ERC20._approve",
      "offset": [
        7408,
        7439
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1053": {
      "fn": "ERC20._approve",
      "offset": [
        7408,
        7439
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1054": {
      "fn": "ERC20._approve",
      "offset": [
        7408,
        7439
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1055": {
      "fn": "ERC20._approve",
      "offset": [
        7408,
        7439
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1056": {
      "fn": "ERC20._approve",
      "offset": [
        7408,
        7439
      ],
      "op": "LOG3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1057": {
      "fn": "ERC20._approve",
      "offset": [
        7117,
        7446
      ],
      "op": "POP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1058": {
      "fn": "ERC20._approve",
      "offset": [
        7117,
        7446
      ],
      "op": "POP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1059": {
      "fn": "ERC20._approve",
      "offset": [
        7117,
        7446
      ],
      "op": "POP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1060": {
      "fn": "ERC20._approve",
      "jump": "o",
      "offset": [
        7117,
        7446
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1061": {
      "fn": "ERC20._transfer",
      "offset": [
        5079,
        5501
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1062": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1064": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1066": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1068": {
      "op": "SHL"
    },
    "1069": {
      "op": "SUB"
    },
    "1070": {
      "fn": "ERC20._transfer",
      "offset": [
        5176,
        5196
      ],
      "op": "DUP4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "statement": 15
    },
    "1071": {
      "branch": 29,
      "fn": "ERC20._transfer",
      "offset": [
        5176,
        5196
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1072": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x46D"
    },
    "1075": {
      "branch": 29,
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "JUMPI",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1076": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "1078": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "MLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1079": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1081": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1083": {
      "op": "SHL"
    },
    "1084": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1088": {
      "op": "MUL"
    },
    "1089": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1090": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1091": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x4"
    },
    "1093": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1094": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1095": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1096": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "1098": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1099": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1100": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1101": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "SUB",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1102": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1103": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1104": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x25"
    },
    "1106": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1107": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1108": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "1110": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1111": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1112": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x677"
    },
    "1115": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x25"
    },
    "1117": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1118": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "CODECOPY",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1119": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "1121": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1122": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1123": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "POP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1124": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "POP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1125": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "1127": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "MLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1128": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1129": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1130": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "SUB",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1131": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1132": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "REVERT",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1133": {
      "fn": "ERC20._transfer",
      "offset": [
        5168,
        5238
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1134": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1136": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1138": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1140": {
      "op": "SHL"
    },
    "1141": {
      "op": "SUB"
    },
    "1142": {
      "fn": "ERC20._transfer",
      "offset": [
        5256,
        5279
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "statement": 16
    },
    "1143": {
      "branch": 30,
      "fn": "ERC20._transfer",
      "offset": [
        5256,
        5279
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1144": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x4B5"
    },
    "1147": {
      "branch": 30,
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "JUMPI",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1148": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "1150": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "MLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1151": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1153": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1155": {
      "op": "SHL"
    },
    "1156": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1160": {
      "op": "MUL"
    },
    "1161": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1162": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1163": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x4"
    },
    "1165": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1166": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1167": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1168": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "1170": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1171": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1172": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1173": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "SUB",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1174": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1175": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1176": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x23"
    },
    "1178": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1179": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1180": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "1182": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1183": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1184": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x632"
    },
    "1187": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x23"
    },
    "1189": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1190": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "CODECOPY",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1191": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "1193": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1194": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1195": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "POP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1196": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "POP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1197": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "1199": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "MLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1200": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1201": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1202": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "SUB",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1203": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1204": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "REVERT",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1205": {
      "fn": "ERC20._transfer",
      "offset": [
        5248,
        5319
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1206": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1208": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1210": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1212": {
      "op": "SHL"
    },
    "1213": {
      "op": "SUB"
    },
    "1214": {
      "fn": "ERC20._transfer",
      "offset": [
        5350,
        5367
      ],
      "op": "DUP4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "statement": 17
    },
    "1215": {
      "fn": "ERC20._transfer",
      "offset": [
        5350,
        5367
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1216": {
      "fn": "ERC20._transfer",
      "offset": [
        5350,
        5359
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x0"
    },
    "1218": {
      "fn": "ERC20._transfer",
      "offset": [
        5350,
        5367
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1219": {
      "fn": "ERC20._transfer",
      "offset": [
        5350,
        5367
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1220": {
      "fn": "ERC20._transfer",
      "offset": [
        5350,
        5367
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1221": {
      "fn": "ERC20._transfer",
      "offset": [
        5350,
        5367
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "1223": {
      "fn": "ERC20._transfer",
      "offset": [
        5350,
        5367
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1224": {
      "fn": "ERC20._transfer",
      "offset": [
        5350,
        5367
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1225": {
      "fn": "ERC20._transfer",
      "offset": [
        5350,
        5367
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1226": {
      "fn": "ERC20._transfer",
      "offset": [
        5350,
        5367
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "1228": {
      "fn": "ERC20._transfer",
      "offset": [
        5350,
        5367
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1229": {
      "fn": "ERC20._transfer",
      "offset": [
        5350,
        5367
      ],
      "op": "KECCAK256",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1230": {
      "fn": "ERC20._transfer",
      "offset": [
        5350,
        5367
      ],
      "op": "SLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1231": {
      "fn": "ERC20._transfer",
      "offset": [
        5350,
        5379
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x4DE"
    },
    "1234": {
      "fn": "ERC20._transfer",
      "offset": [
        5350,
        5379
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1235": {
      "fn": "ERC20._transfer",
      "offset": [
        5372,
        5378
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1236": {
      "fn": "ERC20._transfer",
      "offset": [
        5350,
        5379
      ],
      "op": "PUSH4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0xFFFFFFFF"
    },
    "1241": {
      "fn": "ERC20._transfer",
      "offset": [
        5350,
        5371
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x56D"
    },
    "1244": {
      "fn": "ERC20._transfer",
      "offset": [
        5350,
        5379
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1245": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        5350,
        5379
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1246": {
      "fn": "ERC20._transfer",
      "offset": [
        5350,
        5379
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1247": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1249": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1251": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1253": {
      "op": "SHL"
    },
    "1254": {
      "op": "SUB"
    },
    "1255": {
      "fn": "ERC20._transfer",
      "offset": [
        5330,
        5347
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1256": {
      "fn": "ERC20._transfer",
      "offset": [
        5330,
        5347
      ],
      "op": "DUP6",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1257": {
      "fn": "ERC20._transfer",
      "offset": [
        5330,
        5347
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1258": {
      "fn": "ERC20._transfer",
      "offset": [
        5330,
        5339
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x0"
    },
    "1260": {
      "fn": "ERC20._transfer",
      "offset": [
        5330,
        5347
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1261": {
      "fn": "ERC20._transfer",
      "offset": [
        5330,
        5347
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1262": {
      "fn": "ERC20._transfer",
      "offset": [
        5330,
        5347
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1263": {
      "fn": "ERC20._transfer",
      "offset": [
        5330,
        5347
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "1265": {
      "fn": "ERC20._transfer",
      "offset": [
        5330,
        5347
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1266": {
      "fn": "ERC20._transfer",
      "offset": [
        5330,
        5347
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1267": {
      "fn": "ERC20._transfer",
      "offset": [
        5330,
        5347
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1268": {
      "fn": "ERC20._transfer",
      "offset": [
        5330,
        5347
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "1270": {
      "fn": "ERC20._transfer",
      "offset": [
        5330,
        5347
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1271": {
      "fn": "ERC20._transfer",
      "offset": [
        5330,
        5347
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1272": {
      "fn": "ERC20._transfer",
      "offset": [
        5330,
        5347
      ],
      "op": "KECCAK256",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1273": {
      "fn": "ERC20._transfer",
      "offset": [
        5330,
        5379
      ],
      "op": "SWAP4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1274": {
      "fn": "ERC20._transfer",
      "offset": [
        5330,
        5379
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1275": {
      "fn": "ERC20._transfer",
      "offset": [
        5330,
        5379
      ],
      "op": "SWAP4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1276": {
      "fn": "ERC20._transfer",
      "offset": [
        5330,
        5379
      ],
      "op": "SSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1277": {
      "fn": "ERC20._transfer",
      "offset": [
        5412,
        5432
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "statement": 18
    },
    "1278": {
      "fn": "ERC20._transfer",
      "offset": [
        5412,
        5432
      ],
      "op": "DUP5",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1279": {
      "fn": "ERC20._transfer",
      "offset": [
        5412,
        5432
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1280": {
      "fn": "ERC20._transfer",
      "offset": [
        5412,
        5432
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1281": {
      "fn": "ERC20._transfer",
      "offset": [
        5412,
        5432
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1282": {
      "fn": "ERC20._transfer",
      "offset": [
        5412,
        5432
      ],
      "op": "KECCAK256",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1283": {
      "fn": "ERC20._transfer",
      "offset": [
        5412,
        5432
      ],
      "op": "SLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1284": {
      "fn": "ERC20._transfer",
      "offset": [
        5412,
        5444
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x513"
    },
    "1287": {
      "fn": "ERC20._transfer",
      "offset": [
        5412,
        5444
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1288": {
      "fn": "ERC20._transfer",
      "offset": [
        5437,
        5443
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1289": {
      "fn": "ERC20._transfer",
      "offset": [
        5412,
        5444
      ],
      "op": "PUSH4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0xFFFFFFFF"
    },
    "1294": {
      "fn": "ERC20._transfer",
      "offset": [
        5412,
        5436
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x5CD"
    },
    "1297": {
      "fn": "ERC20._transfer",
      "offset": [
        5412,
        5444
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1298": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        5412,
        5444
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1299": {
      "fn": "ERC20._transfer",
      "offset": [
        5412,
        5444
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1300": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1302": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1304": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1306": {
      "op": "SHL"
    },
    "1307": {
      "op": "SUB"
    },
    "1308": {
      "fn": "ERC20._transfer",
      "offset": [
        5389,
        5409
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1309": {
      "fn": "ERC20._transfer",
      "offset": [
        5389,
        5409
      ],
      "op": "DUP5",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1310": {
      "fn": "ERC20._transfer",
      "offset": [
        5389,
        5409
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1311": {
      "fn": "ERC20._transfer",
      "offset": [
        5389,
        5398
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x0"
    },
    "1313": {
      "fn": "ERC20._transfer",
      "offset": [
        5389,
        5409
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1314": {
      "fn": "ERC20._transfer",
      "offset": [
        5389,
        5409
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1315": {
      "fn": "ERC20._transfer",
      "offset": [
        5389,
        5409
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1316": {
      "fn": "ERC20._transfer",
      "offset": [
        5389,
        5409
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x20"
    },
    "1318": {
      "fn": "ERC20._transfer",
      "offset": [
        5389,
        5409
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1319": {
      "fn": "ERC20._transfer",
      "offset": [
        5389,
        5409
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1320": {
      "fn": "ERC20._transfer",
      "offset": [
        5389,
        5409
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1321": {
      "fn": "ERC20._transfer",
      "offset": [
        5389,
        5409
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0x40"
    },
    "1323": {
      "fn": "ERC20._transfer",
      "offset": [
        5389,
        5409
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1324": {
      "fn": "ERC20._transfer",
      "offset": [
        5389,
        5409
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1325": {
      "fn": "ERC20._transfer",
      "offset": [
        5389,
        5409
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1326": {
      "fn": "ERC20._transfer",
      "offset": [
        5389,
        5409
      ],
      "op": "KECCAK256",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1327": {
      "fn": "ERC20._transfer",
      "offset": [
        5389,
        5444
      ],
      "op": "SWAP5",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1328": {
      "fn": "ERC20._transfer",
      "offset": [
        5389,
        5444
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1329": {
      "fn": "ERC20._transfer",
      "offset": [
        5389,
        5444
      ],
      "op": "SWAP5",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1330": {
      "fn": "ERC20._transfer",
      "offset": [
        5389,
        5444
      ],
      "op": "SSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1331": {
      "fn": "ERC20._transfer",
      "offset": [
        5459,
        5494
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "statement": 19
    },
    "1332": {
      "fn": "ERC20._transfer",
      "offset": [
        5459,
        5494
      ],
      "op": "MLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1333": {
      "fn": "ERC20._transfer",
      "offset": [
        5459,
        5494
      ],
      "op": "DUP6",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1334": {
      "fn": "ERC20._transfer",
      "offset": [
        5459,
        5494
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1335": {
      "fn": "ERC20._transfer",
      "offset": [
        5459,
        5494
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1336": {
      "fn": "ERC20._transfer",
      "offset": [
        5459,
        5494
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1337": {
      "fn": "ERC20._transfer",
      "offset": [
        5459,
        5494
      ],
      "op": "MLOAD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1338": {
      "fn": "ERC20._transfer",
      "offset": [
        5389,
        5409
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1339": {
      "fn": "ERC20._transfer",
      "offset": [
        5389,
        5409
      ],
      "op": "SWAP4",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1340": {
      "fn": "ERC20._transfer",
      "offset": [
        5459,
        5494
      ],
      "op": "SWAP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1341": {
      "fn": "ERC20._transfer",
      "offset": [
        5459,
        5494
      ],
      "op": "DUP8",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1342": {
      "fn": "ERC20._transfer",
      "offset": [
        5459,
        5494
      ],
      "op": "AND",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1343": {
      "fn": "ERC20._transfer",
      "offset": [
        5459,
        5494
      ],
      "op": "SWAP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1344": {
      "fn": "ERC20._transfer",
      "offset": [
        5459,
        5494
      ],
      "op": "PUSH32",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
      "value": "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
    },
    "1377": {
      "fn": "ERC20._transfer",
      "offset": [
        5459,
        5494
      ],
      "op": "SWAP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1378": {
      "fn": "ERC20._transfer",
      "offset": [
        5459,
        5494
      ],
      "op": "SWAP2",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1379": {
      "fn": "ERC20._transfer",
      "offset": [
        5459,
        5494
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1380": {
      "fn": "ERC20._transfer",
      "offset": [
        5459,
        5494
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1381": {
      "fn": "ERC20._transfer",
      "offset": [
        5459,
        5494
      ],
      "op": "SUB",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1382": {
      "fn": "ERC20._transfer",
      "offset": [
        5459,
        5494
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1383": {
      "fn": "ERC20._transfer",
      "offset": [
        5459,
        5494
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1384": {
      "fn": "ERC20._transfer",
      "offset": [
        5459,
        5494
      ],
      "op": "LOG3",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1385": {
      "fn": "ERC20._transfer",
      "offset": [
        5079,
        5501
      ],
      "op": "POP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1386": {
      "fn": "ERC20._transfer",
      "offset": [
        5079,
        5501
      ],
      "op": "POP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1387": {
      "fn": "ERC20._transfer",
      "offset": [
        5079,
        5501
      ],
      "op": "POP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1388": {
      "fn": "ERC20._transfer",
      "jump": "o",
      "offset": [
        5079,
        5501
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol"
    },
    "1389": {
      "fn": "SafeMath.sub",
      "offset": [
        1274,
        1453
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1390": {
      "fn": "SafeMath.sub",
      "offset": [
        1332,
        1339
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "value": "0x0"
    },
    "1392": {
      "fn": "SafeMath.sub",
      "offset": [
        1364,
        1365
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "statement": 20
    },
    "1393": {
      "fn": "SafeMath.sub",
      "offset": [
        1359,
        1360
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1394": {
      "fn": "SafeMath.sub",
      "offset": [
        1359,
        1365
      ],
      "op": "GT",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1395": {
      "branch": 25,
      "fn": "SafeMath.sub",
      "offset": [
        1359,
        1365
      ],
      "op": "ISZERO",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1396": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "value": "0x5C7"
    },
    "1399": {
      "branch": 25,
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "JUMPI",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1400": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "value": "0x40"
    },
    "1402": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1403": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "MLOAD",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1404": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1406": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1408": {
      "op": "SHL"
    },
    "1409": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1413": {
      "op": "MUL"
    },
    "1414": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1415": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1416": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "value": "0x20"
    },
    "1418": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "value": "0x4"
    },
    "1420": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1421": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1422": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1423": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "value": "0x1E"
    },
    "1425": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "value": "0x24"
    },
    "1427": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1428": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1429": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1430": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "PUSH32",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "value": "0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000"
    },
    "1463": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "value": "0x44"
    },
    "1465": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1466": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1467": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1468": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1469": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "MLOAD",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1470": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1471": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1472": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1473": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "SUB",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1474": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "value": "0x64"
    },
    "1476": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1477": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1478": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "REVERT",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1479": {
      "fn": "SafeMath.sub",
      "offset": [
        1351,
        1400
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1480": {
      "op": "POP"
    },
    "1481": {
      "fn": "SafeMath.sub",
      "offset": [
        1422,
        1427
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "statement": 21
    },
    "1482": {
      "fn": "SafeMath.sub",
      "offset": [
        1422,
        1427
      ],
      "op": "SUB",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1483": {
      "fn": "SafeMath.sub",
      "offset": [
        1422,
        1427
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1484": {
      "fn": "SafeMath.sub",
      "jump": "o",
      "offset": [
        1274,
        1453
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1485": {
      "fn": "SafeMath.add",
      "offset": [
        834,
        1010
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1486": {
      "fn": "SafeMath.add",
      "offset": [
        892,
        899
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "value": "0x0"
    },
    "1488": {
      "fn": "SafeMath.add",
      "offset": [
        923,
        928
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "statement": 22
    },
    "1489": {
      "fn": "SafeMath.add",
      "offset": [
        923,
        928
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1490": {
      "fn": "SafeMath.add",
      "offset": [
        923,
        928
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1491": {
      "fn": "SafeMath.add",
      "offset": [
        946,
        952
      ],
      "op": "DUP4",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "statement": 23
    },
    "1492": {
      "fn": "SafeMath.add",
      "offset": [
        946,
        952
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1493": {
      "fn": "SafeMath.add",
      "offset": [
        946,
        952
      ],
      "op": "LT",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1494": {
      "branch": 26,
      "fn": "SafeMath.add",
      "offset": [
        946,
        952
      ],
      "op": "ISZERO",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1495": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "PUSH2",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "value": "0x62A"
    },
    "1498": {
      "branch": 26,
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "JUMPI",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1499": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "value": "0x40"
    },
    "1501": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "DUP1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1502": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "MLOAD",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1503": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1505": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1507": {
      "op": "SHL"
    },
    "1508": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1512": {
      "op": "MUL"
    },
    "1513": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1514": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1515": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "value": "0x20"
    },
    "1517": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "value": "0x4"
    },
    "1519": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1520": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1521": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1522": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "value": "0x1B"
    },
    "1524": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "value": "0x24"
    },
    "1526": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1527": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1528": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1529": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "PUSH32",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "value": "0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
    },
    "1562": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "value": "0x44"
    },
    "1564": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "DUP3",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1565": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1566": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "MSTORE",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1567": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1568": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "MLOAD",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1569": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1570": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "DUP2",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1571": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1572": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "SUB",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1573": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "PUSH1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "value": "0x64"
    },
    "1575": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "ADD",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1576": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "SWAP1",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1577": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "REVERT",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1578": {
      "fn": "SafeMath.add",
      "offset": [
        938,
        984
      ],
      "op": "JUMPDEST",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1579": {
      "fn": "SafeMath.add",
      "offset": [
        1002,
        1003
      ],
      "op": "SWAP4",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol",
      "statement": 24
    },
    "1580": {
      "fn": "SafeMath.add",
      "offset": [
        834,
        1010
      ],
      "op": "SWAP3",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    },
    "1581": {
      "op": "POP"
    },
    "1582": {
      "op": "POP"
    },
    "1583": {
      "op": "POP"
    },
    "1584": {
      "fn": "SafeMath.add",
      "jump": "o",
      "offset": [
        834,
        1010
      ],
      "op": "JUMP",
      "path": "contracts/open-zeppelin/contracts/math/SafeMath.sol"
    }
  },
  "sha1": "5e3eabc1f7f46c3375a3d8eb4ab618ea528254c4",
  "source": "pragma solidity ^0.5.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the `IERC20` interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using `_mint`.\n * For a generic mechanism see `ERC20Mintable`.\n *\n * *For a detailed writeup see our guide [How to implement supply\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See `IERC20.approve`.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See `IERC20.totalSupply`.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See `IERC20.balanceOf`.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See `IERC20.transfer`.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.allowance`.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See `IERC20.approve`.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.transferFrom`.\n     *\n     * Emits an `Approval` event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of `ERC20`;\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `value`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to `approve` that can be used as a mitigation for\n     * problems described in `IERC20.approve`.\n     *\n     * Emits an `Approval` event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to `approve` that can be used as a mitigation for\n     * problems described in `IERC20.approve`.\n     *\n     * Emits an `Approval` event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to `transfer`, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a `Transfer` event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a `Transfer` event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n     /**\n     * @dev Destoys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a `Transfer` event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an `Approval` event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See `_burn` and `_approve`.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n    }\n}\n",
  "sourceMap": "1232:6578:107:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1232:6578:107;;;;;;;",
  "sourcePath": "contracts/open-zeppelin/contracts/token/ERC20/ERC20.sol",
  "type": "contract"
}